# Copyright (c) 2022 The Orbit Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

name: build-and-test
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  schedule:
  - cron: '0 7 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  job:
    name: ${{ matrix.build_type }}.${{ matrix.cc }}.build-and-test-ubuntu
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "GCC Release",
            build_type: 'Release',
            cc: "gcc",
            cxx: "g++"
        }
        - {
          name: "GCC Debug",
          build_type: 'Debug',
          cc: "gcc",
          cxx: "g++"
        }
        - {
            name: "Clang Release",
            build_type: 'Release',
            cc: "clang",
            cxx: "clang++"
        }
        - {
            name: "Clang Debug",
            build_type: 'Debug',
            cc: "clang",
            cxx: "clang++"
        }
    env:
      CCACHE_BASEDIR: "${GITHUB_WORKSPACE}"
      CCACHE_DIR: "${GITHUB_WORKSPACE}/.ccache"
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: "6"
      CCACHE_MAXSIZE: "400M"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Install dependencies
        run: |
           sudo apt update &&                             \
           sudo apt install --yes --no-install-recommends \
           build-essential                                \
           cmake                                          \
           ccache                                         \
           libboost-dev                                   \
           libcapstone-dev                                \
           libgrpc++-dev                                  \
           libssh2-1-dev                                  \
           vulkan-validationlayers-dev                    \
           libz-dev                                       \
           llvm-dev                                       \
           libfreetype6-dev                               \
           libimgui-dev                                   \
           protobuf-compiler-grpc                         \
           pkg-config                                     \
           libvulkan-volk-dev                             \
           libvulkan-dev                                  \
           libopengl-dev                                  \
           libglx-dev                                     \
           mesa-common-dev                                \
           qtbase5-dev                                    \
           libgtest-dev                                   \
           libgmock-dev                                   \
           git                                            \
           libprotobuf-dev
      - run: mkdir build
      - name: Save CCache Timestamp
        id: ccache_timestamp
        run: echo "timestamp=$(date +%m-%d-%Y--%H:%M:%S)" >> $GITHUB_OUTPUT
      - name: Setup CCache Files
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ matrix.build_type }}-${{ matrix.cc }}-ccache-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.build_type }}-${{ matrix.cc }}-ccache-
            ccache
      - name: CMake Configure
          working-directory: ./workspace
        env:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}                                            \
           -DCMAKE_CXX_FLAGS="-march=sandybridge -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer" \
           -DCMAKE_C_COMPILER_LAUNCHER=ccache                                                          \
           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache                                                        \
           ${GITHUB_WORKSPACE}
      - run: ccache -p
      - run: ccache -z
      - name: CMake Build
        run: cmake --build .
      - name: CCache Stats
        run: ccache -s
      - name: CMake Test
        run: ctest --output-on-failure -E IntegrationTest

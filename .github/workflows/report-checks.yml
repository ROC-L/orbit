# Copyright (c) 2022 The Orbit Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

name: report-checks

on:
  workflow_run:
    workflows: ['checks']
    types:
      - completed

permissions: read-all

jobs:
  report-missing-license-headers:
    permissions:
      checks: write
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Download artifact
      uses: dawidd6/action-download-artifact@e6e25ac3a2b93187502a8be1ef9e9603afc34925 # v2.24.2
      with:
        workflow: ${{ github.event.workflow_run.workflow_id }}
        workflow_conclusion: ''
        name: missing_license_headers
    - name: Report missing headers
      run: ./contrib/scripts/report-license-headers.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COMMIT_SHA: ${{ github.event.workflow_run.head_commit.id }}
      shell: bash

  report-clang-format-diff:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: dawidd6/action-download-artifact@e6e25ac3a2b93187502a8be1ef9e9603afc34925 # v2.24.2
      with:
        workflow: ${{ github.event.workflow_run.workflow_id }}
        workflow_conclusion: ''
    - run: echo "PR_NUMBER=$(cat pr_number/pr_number.txt | jq -r .)" >> $GITHUB_ENV
    - run: npm install gitdiff-parser escape-json-node
      if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    - name: Report clang-format suggestions
      if: ${{ github.event.workflow_run.conclusion == 'failure' }}
      uses: actions/github-script@v6
      env:
        COMMIT_SHA: ${{ github.event.workflow_run.head_commit.id }}
      with:
        github-token: ${{ secrets.ORBITPROFILER_BOT_PAT }}
        script: |
          function* createComments() {
            const gitDiffParser = require('gitdiff-parser');
            const escapeJSON = require('escape-json-node');
            const gitDiffText = require("fs").readFileSync(
                "clang_format_diff/clang_format.diff").toString();
            const diffFiles = gitDiffParser.parse(gitDiffText);

            for (const diffFile of diffFiles) {
              for (const hunk of diffFile.hunks) {
                let comment = {};
                comment.path = diffFile.oldPath;
                if (hunk.oldLines > 1) {
                  comment.start_line = hunk.oldStart;
                  comment.line = hunk.oldStart + hunk.oldLines - 1;
                } else {
                  comment.line = hunk.oldStart;
                }
                comment.start_side = 'RIGHT';
                comment.side = 'RIGHT';
                const suggestion = hunk.changes.filter(change => !change.isDelete).map(
                    change => escapeJSON(change.content)).join("\n");
                comment.body = `\`\`\`suggestion\n${suggestion}\n\`\`\``;

                yield comment;
              }
            }
          }

          const comments = [...createComments()];

          const {repo, owner} = context.repo;
          const request = {
            owner: owner,
            repo: repo,
            pull_number: process.env.PR_NUMBER,
            commit_id: process.env.COMMIT_SHA,
            body: 'Thanks for your change. Please address the suggested formatting changes.',
            event: 'COMMENT',
            comments: comments
          }

          console.log(`Sending request:\n${request}\n\n`);

          const result = await github.request(`POST /repos/${owner}/${repo}/pulls/${process.env.PR_NUMBER}/reviews`, request);
          console.log(`Received:\n${result}`);
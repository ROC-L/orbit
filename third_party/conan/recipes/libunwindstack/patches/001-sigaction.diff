--- a/libunwindstack/ThreadUnwinder.cpp	2021-07-13 18:00:48.244713756 +0200
+++ b/libunwindstack/ThreadUnwinder.cpp	2021-07-13 18:01:17.740488343 +0200
@@ -87,8 +87,9 @@
 
   ThreadEntry* entry = ThreadEntry::Get(tid);
   entry->Lock();
-  struct sigaction new_action = {.sa_sigaction = SignalHandler,
-                                 .sa_flags = SA_RESTART | SA_SIGINFO | SA_ONSTACK};
+  struct sigaction new_action = {};
+  new_action.sa_sigaction = SignalHandler;
+  new_action.sa_flags = SA_RESTART | SA_SIGINFO | SA_ONSTACK;
   struct sigaction old_action = {};
   sigemptyset(&new_action.sa_mask);
   if (sigaction(signal, &new_action, &old_action) != 0) {
@@ -124,8 +124,9 @@
     // within the timeout. Add a signal handler that's simply going to log
     // something so that we don't crash if the signal eventually gets
     // delivered. Only do this if there isn't already an action set up.
-    struct sigaction log_action = {.sa_sigaction = SignalLogOnly,
-                                   .sa_flags = SA_RESTART | SA_SIGINFO | SA_ONSTACK};
+    struct sigaction log_action = {};
+    log_action.sa_sigaction = SignalLogOnly;
+    log_action.sa_flags = SA_RESTART | SA_SIGINFO | SA_ONSTACK;
     sigemptyset(&log_action.sa_mask);
     sigaction(signal, &log_action, nullptr);
   } else {
--- a/libbase/include/android-base/silent_death_test.h	2021-07-13 18:00:48.244713756 +0200
+++ b/libbase/include/android-base/silent_death_test.h	2021-07-13 18:00:48.244713756 +0200
@@ -34,6 +34,7 @@
   virtual void SetUp() {
     // Suppress debuggerd stack traces. Too slow.
     for (int signo : {SIGABRT, SIGBUS, SIGSEGV, SIGSYS}) {
-      struct sigaction64 action = {.sa_handler = SIG_DFL};
+      struct sigaction64 action = {};
+      action.sa_handler = SIG_DFL;
       sigaction64(signo, &action, &previous_);
     }
   }

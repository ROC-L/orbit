#pragma once

#include <chrono>
#include "oqpi/threading/thread.hpp"
#include "oqpi/threading/thread_attributes.hpp"


namespace oqpi { namespace this_thread {

    //----------------------------------------------------------------------------------------------
    inline void set_name(const char *name);
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    // Retrieves the number of the processor the current thread was running on during
    // the call to this function.
    uint32_t get_current_core();
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    void yield() noexcept;
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    void set_priority(thread_priority threadPriority);
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    void set_affinity_mask(core_affinity coreAffinityMask);
    //----------------------------------------------------------------------------------------------
    inline void set_affinity(uint32_t coreNumber)
    {
        set_affinity_mask(core_affinity(1ul << coreNumber));
    }
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    auto get_id();
    //----------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------
    template<typename _Rep, typename _Period>
    void sleep_for(const std::chrono::duration<_Rep, _Period>& relTime);
    //----------------------------------------------------------------------------------------------
    template<typename _Clock, typename _Duration>
    inline void sleep_until(const std::chrono::time_point<_Clock, _Duration>& absTime)
    {
        sleep_for(absTime - _Clock::now());
    }
    //----------------------------------------------------------------------------------------------

} /*this_thread*/ } /*oqpi*/
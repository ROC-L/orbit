// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef LINUX_TRACING_PERF_EVENT_H_
#define LINUX_TRACING_PERF_EVENT_H_

#include <asm/perf_regs.h>
#include <string.h>
#include <sys/types.h>

#include <array>
#include <cstdint>
#include <memory>
#include <string>
#include <variant>
#include <vector>

#include "GrpcProtos/Constants.h"
#include "OrbitBase/MakeUniqueForOverwrite.h"
#include "PerfEventRecords.h"

namespace orbit_linux_tracing {

class PerfEventVisitor;

static constexpr int kNotOrderedInAnyFileDescriptor = -1;

std::array<uint64_t, PERF_REG_X86_64_MAX> perf_event_sample_regs_user_all_to_register_array(
    const perf_event_sample_regs_user_all& regs);

struct ForkPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct ExitPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct LostPerfEvent {
  uint64_t timestamp;
  uint64_t previous_timestamp = 0;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

// This class doesn't correspond to any event generated by perf_event_open. Rather, these events are
// produced by PerfEventProcessor. We need them to be part of the same PerfEvent hierarchy.
struct DiscardedPerfEvent {
  uint64_t timestamp;
  uint64_t begin_timestamp_ns;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct StackSamplePerfEvent {
  [[nodiscard]] std::array<uint64_t, PERF_REG_X86_64_MAX> GetRegisters() const {
    return perf_event_sample_regs_user_all_to_register_array(*regs);
  }
  [[nodiscard]] const char* GetStackData() const { return data.get(); }
  // Handing out this non const pointer makes the stack data mutable even if the
  // StackSamplePerfEvent is const.  This mutablility is needed in
  // UprobesReturnAddressManager::PatchSample.
  [[nodiscard]] char* GetMutableStackData() const { return data.get(); }
  [[nodiscard]] uint64_t GetStackSize() const { return dyn_size; }

  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  std::unique_ptr<perf_event_sample_regs_user_all> regs;
  uint64_t dyn_size;
  std::unique_ptr<char[]> data;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct CallchainSamplePerfEvent {
  [[nodiscard]] const uint64_t* GetCallchain() const { return ips.get(); }
  [[nodiscard]] uint64_t GetCallchainSize() const { return ips_size; }
  [[nodiscard]] std::array<uint64_t, PERF_REG_X86_64_MAX> GetRegisters() const {
    return perf_event_sample_regs_user_all_to_register_array(*regs);
  }
  [[nodiscard]] const char* GetStackData() const { return data.get(); }
  void SetIps(const std::vector<uint64_t>& new_ips) const {
    ips_size = new_ips.size();
    ips = make_unique_for_overwrite<uint64_t[]>(ips_size);
    memcpy(ips.get(), new_ips.data(), ips_size * sizeof(uint64_t));
  }
  [[nodiscard]] std::vector<uint64_t> CopyOfIpsAsVector() const {
    return std::vector<uint64_t>(ips.get(), ips.get() + ips_size);
  }

  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
  // Mutability is needed in SetIps which in turn is needed by
  // LeafFunctionCallManager::PatchCallerOfLeafFunction.
  mutable uint64_t ips_size;
  mutable std::unique_ptr<uint64_t[]> ips;
  std::unique_ptr<perf_event_sample_regs_user_all> regs;
  std::unique_ptr<char[]> data;
};

struct UprobesPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t cpu;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
  uint64_t function_id = orbit_grpc_protos::kInvalidFunctionId;
  uint64_t sp;
  uint64_t ip;
  uint64_t return_address;
};

struct UprobesWithArgumentsPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t cpu;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
  uint64_t function_id = orbit_grpc_protos::kInvalidFunctionId;
  uint64_t return_address;
  perf_event_sample_regs_user_sp_ip_arguments regs;
};

struct UretprobesPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct UretprobesWithReturnValuePerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
  uint64_t rax;
};

struct MmapPerfEvent {
  uint64_t timestamp;
  uint64_t address;
  uint64_t length;
  uint64_t page_offset;
  std::string filename;
  pid_t pid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct GenericTracepointPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t cpu;
  uint32_t size;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct TaskNewtaskPerfEvent {
  uint64_t timestamp;
  char comm[16];
  pid_t new_tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct TaskRenamePerfEvent {
  uint64_t timestamp;
  char newcomm[16];
  pid_t renamed_tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct SchedSwitchPerfEvent {
  uint64_t timestamp;
  uint32_t cpu;
  pid_t prev_pid_or_minus_one;
  pid_t prev_tid;
  int64_t prev_state;
  int32_t next_tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct SchedWakeupPerfEvent {
  uint64_t timestamp;
  pid_t woken_tid;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct AmdgpuCsIoctlPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t context;
  uint32_t seqno;
  std::string timeline_string;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct AmdgpuSchedRunJobPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t context;
  uint32_t seqno;
  std::string timeline_string;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

struct DmaFenceSignaledPerfEvent {
  uint64_t timestamp;
  pid_t pid;
  pid_t tid;
  uint32_t context;
  uint32_t seqno;
  std::string timeline_string;
  int ordered_in_file_descriptor = kNotOrderedInAnyFileDescriptor;
};

using PerfEvent = std::variant<
    ForkPerfEvent, ExitPerfEvent, LostPerfEvent, DiscardedPerfEvent, StackSamplePerfEvent,
    CallchainSamplePerfEvent, UprobesPerfEvent, UprobesWithArgumentsPerfEvent, UretprobesPerfEvent,
    UretprobesWithReturnValuePerfEvent, MmapPerfEvent, GenericTracepointPerfEvent,
    TaskNewtaskPerfEvent, TaskRenamePerfEvent, SchedSwitchPerfEvent, SchedWakeupPerfEvent,
    AmdgpuCsIoctlPerfEvent, AmdgpuSchedRunJobPerfEvent, DmaFenceSignaledPerfEvent>;

inline uint64_t GetTimestamp(const PerfEvent& event) {
  return std::visit([](const auto& arg) -> uint64_t { return arg.timestamp; }, event);
}

inline int GetOrderedInFileDescriptor(const PerfEvent& event) {
  return std::visit([](const auto& arg) -> int { return arg.ordered_in_file_descriptor; }, event);
}

}  // namespace orbit_linux_tracing

#endif  // LINUX_TRACING_PERF_EVENT_H_

// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package orbit_client_protos;

message FunctionStats {
  uint64 count = 1;
  uint64 total_time_ns = 2;
  uint64 average_time_ns = 3;
  uint64 min_ns = 4;
  uint64 max_ns = 5;
  double variance_ns = 6;
  uint64 std_dev_ns = 7;
}

message FunctionInfo {
  reserved 1, 4, 6, 8, 9, 10, 11;
  string pretty_name = 2;
  string module_path = 3;
  string module_build_id = 12;
  uint64 address = 5;
  uint64 size = 7;
}

message CallstackInfo {
  repeated uint64 frames = 1;

  enum CallstackType {
    // Keep these in sync with orbit_grpc_protos::Callstack::CallstackType.
    kComplete = 0;
    kDwarfUnwindingError = 1;
    kFramePointerUnwindingError = 2;
    kInUprobes = 3;
    kInUserSpaceInstrumentation = 7;
    kCallstackPatchingFailed = 4;
    kStackTopForDwarfUnwindingTooSmall = 5;
    kStackTopDwarfUnwindingError = 6;
    // These are set by the client and are in addition to the ones in
    // Callstack::CallstackType.
    kFilteredByMajorityOutermostFrame = 100;
  }
  CallstackType type = 2;
}

message ThreadStateSliceInfo {
  // pid is absent as we don't yet get that information from the service.
  uint32 tid = 1;
  enum ThreadState {
    kRunning = 0;
    kRunnable = 1;
    kInterruptibleSleep = 2;
    kUninterruptibleSleep = 3;
    kStopped = 4;
    kTraced = 5;
    kDead = 6;
    kZombie = 7;
    kParked = 8;
    kIdle = 9;
  }
  ThreadState thread_state = 2;
  uint64 begin_timestamp_ns = 3;
  uint64 end_timestamp_ns = 4;
}

message TracepointInfo {
  string name = 1;
  string category = 2;
  uint64 tracepoint_info_key = 3;
}

message TracepointEventInfo {
  uint32 pid = 1;
  uint32 tid = 2;
  int64 time = 3;
  int32 cpu = 4;
  uint64 tracepoint_info_key = 5;
}

message LinuxAddressInfo {
  uint64 absolute_address = 1;
  string module_path = 2;
  string function_name = 3;
  uint64 offset_in_function = 4;
}

message TimerInfo {
  // NextID: 18
  uint64 start = 1;
  uint64 end = 2;
  uint32 process_id = 3;
  uint32 thread_id = 4;
  uint32 depth = 5;

  enum Type {
    kNone = 0;
    kCoreActivity = 1;
    // kIntrospection = 2;
    kGpuActivity = 3;
    kFrame = 4;
    kGpuCommandBuffer = 5;
    kGpuDebugMarker = 6;
    kApiEvent = 7;
    kSystemMemoryUsage = 8;
    kCGroupAndProcessMemoryUsage = 9;
    kPageFaults = 10;
    kApiScope = 11;
    kApiScopeAsync = 12;
  }
  Type type = 6;

  int32 processor = 7;
  uint64 callstack_id = 8;
  uint64 function_id = 9;
  uint64 user_data_key = 10;
  uint64 timeline_hash = 11;
  repeated uint64 registers = 12;
  Color color = 13;
  uint64 group_id = 14;
  uint64 api_async_scope_id = 15;
  uint64 address_in_function = 16;
  string api_scope_name = 17;
}

message ApiStringEvent {
  reserved 1, 2, 3;

  uint64 async_scope_id = 4;
  string name = 5;
  // The old manual instrumentation (orbit_grpc_protos::ApiEvent) allowed
  // arbitrarily long strings by concatenating strings associated with the same
  // async_scope_id. This is no longer the case because
  // orbit_grpc_protos::ApiStringEvent already supports arbitrarily long
  // strings.
  bool should_concatenate = 6;
}

message ApiTrackValue {
  // NextID: 11
  uint32 process_id = 1;
  uint32 thread_id = 2;
  uint64 timestamp_ns = 3;
  string name = 4;

  oneof data {
    int32 data_int = 5;
    int64 data_int64 = 6;
    uint32 data_uint = 7;
    uint64 data_uint64 = 8;
    float data_float = 9;
    double data_double = 10;
  }
}

message Color {
  // Each color must be between 0 and 255 (including).
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  uint32 alpha = 4;
}

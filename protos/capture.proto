// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

import "basic_types.proto";

message CaptureOptions {
  bool trace_context_switches = 1;
  int32 pid = 2;
  double sampling_rate = 3;

  enum UnwindingMethod {
    kUndefined = 0;
    kFramePointers = 1;
    kDwarf = 2;
  }
  UnwindingMethod unwinding_method = 4;

  message InstrumentedFunction {
    string file_path = 1;
    uint64 file_offset = 2;
    uint64 absolute_address = 3;
  }
  repeated InstrumentedFunction instrumented_functions = 5;

  bool trace_gpu_driver = 6;
}

message SchedulingSlice {
  int32 pid = 1;
  int32 tid = 2;
  int32 core = 3;
  uint64 in_timestamp_ns = 4;
  uint64 out_timestamp_ns = 5;
}

message FunctionCall {
  int32 pid = 1;
  int32 tid = 2;
  uint64 absolute_address = 3;
  uint64 begin_timestamp_ns = 4;
  uint64 end_timestamp_ns = 5;
  int32 depth = 6;
  uint64 return_value = 7;
}

message Callstack {
  repeated uint64 pcs = 1;
  uint64 hash = 2;
  uint32 thread_id = 3;
}

message InternedCallstack {
  uint64 key = 1;
  Callstack intern = 2;
}

message CallstackSample {
  int32 pid = 1;
  int32 tid = 2;
  oneof callstack_or_key {
    Callstack callstack = 3;
    uint64 callstack_key = 4;
  }
  uint64 timestamp_ns = 5;
}

message InternedString {
  uint64 key = 1;
  string intern = 2;
}

message GpuJob {
  int32 pid = 1;
  int32 tid = 2;
  uint32 context = 3;
  uint32 seqno = 4;
  oneof timeline_or_key {
    string timeline = 5;
    uint64 timeline_key = 6;
  }
  int32 depth = 7;
  uint64 amdgpu_cs_ioctl_time_ns = 8;
  uint64 amdgpu_sched_run_job_time_ns = 9;
  uint64 gpu_hardware_start_time_ns = 10;
  uint64 dma_fence_signaled_time_ns = 11;
}

message ThreadName {
  int32 pid = 1;
  int32 tid = 2;
  string name = 3;
  uint64 timestamp_ns = 4;
}

message AddressInfo {
  uint64 absolute_address = 1;
  oneof function_name_or_key {
    string function_name = 2;
    uint64 function_name_key = 3;
  }
  uint64 offset_in_function = 4;
  oneof map_name_or_key {
    string map_name = 5;
    uint64 map_name_key = 6;
  }
}

message CaptureEvent {
  oneof event {
    SchedulingSlice scheduling_slice = 1;
    InternedCallstack interned_callstack = 2;
    CallstackSample callstack_sample = 3;
    FunctionCall function_call = 4;
    InternedString interned_string = 5;
    GpuJob gpu_job = 6;
    ThreadName thread_name = 7;
    AddressInfo address_info = 8;
  }
}

message CaptureData {
  map<uint64, uint64> function_count_map = 1;
  map<uint64, Callstack> callstacks = 2;
  int32 process_id = 3;
  string process_name = 4;
  map<int32, string> thread_names = 5;
  map<uint64, AddressInfo> address_infos = 6;
  map<uint64, string> address_to_function_name = 7;
}

message FunctionStats {
  uint64 address = 1;
  uint64 count = 2;
  double total_time_ms = 3;
  double average_time_ms = 4;
  double min_ms = 5;
  double max_ms = 6;
}

message Function {
  string name = 1;
  string pretty_name = 2;
  string loaded_module_path = 3;
  uint64 module_base_address = 4;
  uint64 address = 5;
  uint64 load_bias = 6;
  uint64 size = 7;
  string file = 8;
  uint32 line = 9;
  int32 calling_convention = 10;

  enum OrbitType {
    NONE = 0;
    ORBIT_TIMER_START = 1;
    ORBIT_TIMER_STOP = 2;
    ORBIT_LOG = 3;
    ORBIT_TIMER_START_ASYNC = 4;
    ORBIT_TIMER_STOP_ASYNC = 5;
    ORBIT_TRACK_INT = 6;
    ORBIT_TRACK_INT_64 = 7;
    ORBIT_TRACK_UINT = 8;
    ORBIT_TRACK_UINT_64 = 9;
    ORBIT_TRACK_FLOAT = 10;
    ORBIT_TRACK_DOUBLE = 11;
    ORBIT_TRACK_FLOAT_AS_INT = 12;
    ORBIT_TRACK_DOUBLE_AS_INT_64 = 13;
  };
  OrbitType type = 11;

  FunctionStats stats = 12;
}

message FunctionList {
  repeated Function data = 1;
}

message SampledFunction {
  string name = 1;
  string module = 2;
  string file = 3;
  float exclusive = 4;
  float inclusive = 5;
  int32 line = 6;
  uint64 address = 7;
  Function function = 8;
}

message ThreadSampleData {
  map<uint64, uint32> callstack_count = 1;
  map<uint64, uint32> address_count = 2;
  map<uint64, uint32> raw_address_count = 3;
  map<uint64, uint32> exclusive_count = 4;
  uint32 num_samples = 5;
  repeated SampledFunction sample_report = 6;
  repeated float thread_usage = 7;
  float average_thread_usage = 8;
  int32 thread_id = 9;
}

message SamplingProfilerData {
  int32 num_samples = 1;
  map<int32, ThreadSampleData> thread_id_to_sample_data = 2;
  map<uint64, Callstack> unique_callstacks = 3;
  map<uint64, Callstack> unique_resolved_callstacks = 4;
  map<uint64, uint64> original_callstack_to_resolved_callstack = 5;
  map<uint64, Uint64List> function_to_callstacks_set = 6;
  map<uint64, uint64> exact_address_to_function_address = 7;
  map<uint64, Uint64List> function_address_to_exact_addresses_set = 8;
}

message CallstackEvent {
  uint64 time = 1;
  uint64 callstack_id = 2;
  int32 thread_id = 3;
}

message Uint64ToCallstackEvent {
  map<uint64, CallstackEvent> data = 1;
}

message EventBufferData {
  map<int32, Uint64ToCallstackEvent> callstack_events = 1;
  uint64 max_time = 2;
  uint64 min_time = 3;
}

message CaptureHeader {
  string capture_name = 1;
  uint32 num_timers = 2;
  uint32 version = 3;
}

message TimerData {
  uint64 start = 1;
  uint64 end = 2;
  int32 process_id = 3;
  int32 thread_id = 4;
  uint32 depth = 5;

  enum Type {
    NONE = 0;
    CORE_ACTIVITY = 1;
    INTROSPECTION = 2;
    GPU_ACTIVITY = 3;
  };
  Type type = 6;

  int32 processor = 7;
  uint64 callstack_hash = 8;
  uint64 function_address = 9;
  uint64 user_data_key = 10;
  uint64 timeline_hash = 11;
}
